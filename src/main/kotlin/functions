import kotlin.math.PI
fun main() {
    /*
   Function arguments are some data that the function takes as the input to perform some actions with it.
 Arguments are usually passed in parentheses, separated by commas:
 A function can have as many arguments as you want, it depends on the specific task.
 Also, it might not have arguments at all.
 For example, there may be an open_all_files function that opens all text files from a directory.

 Another example of a function with no arguments is an output function that prints a phrase to the console
 after each completed block of code. It takes nothing as input and just prints out the string multiple times.

 In any case, no matter how many arguments a function has, there is always the result of its work:
 a number, a string, an open file, and so on. In some cases, this result is visible to us.

However, after we see the result, we cannot do anything with it.
It cannot be further used in the code, passed as an argument to another function.
Functions that perform certain actions but do not return a result are often referred to as procedures.

If we need to do something else with the result, we need to make it returnable.
If the function returns a result, it means that the function has received some specific answer
such as a number or a string that can be used further in the program.
The return is an operator with which we return the result. It is used in all programming languages.
Functions that take no arguments can return results too.
Usually, it will always be the same result (but sometimes there are exceptions)


You declare functions in Kotlin using the fun keyword,
a name, a list of parameters (if needed), the return type, and the function body.
the fundamental syntax for declaring a function is as follows:

fun functionName(param1: Type1, param2: Type2, ...): ReturnType {
    // Function body
    return value
}
 */


    val customGreeting = greet(name = "Bob", greeting = "Welcome")
    println(customGreeting) // Output: Welcome, Bob! This would go in main

    fun greet(name: String, greeting: String = "Hello"): String {
        return "$greeting, $name!"
    }


    val custGreet = greet2("Alice")
    fun greet2(name: String): String {
        return "Hello, $name!" //returns to whatever called greet
    }

    fun hello(name: String) {
            println("Hello, $name")
        }

    /*
Kotlin also supports named arguments, allowing you to note the names of the parameters when invoking the function.
This feature is especially helpful when a function has numerous parameters with default values,
and you want to provide a non-default value for a parameter that isn't the last one on the list:

greet(name = "Bob", greeting = "Hi")
Named arguments amplify code readability and enable calling functions with parameters in an order different from how they were defined.
 */



    fun usingArgs(args: Array<String>) {
        hello("World")
        printMessage("Hello")
        println(sum(1, 2))
        println(sum2(1, 2))
        printMessageWithPrefix(prefix = "Log", message = "Hello") //Looks like parameters here take precedence
        printMessageWithPrefix(message = "Hello", prefix = "Log") // Look below to see where it changes to Info
        printMessageWithPrefix("Hello", "Log") //Stuff in gray is not needed, just a reminder what it is
        printMessageWithPrefix("Hello") //changed prefix to Info in function call below
        println(circleArea(2))
        println(circleArea2(2))
        /*
    Not sure what's better, this one or the next one
    this one is slightly shorter but not as readable
    println(intervalInSeconds(1, 20, 15))
    println(intervalInSeconds(0, 1, 25))
    println(intervalInSeconds(2, 0, 0))
    println(intervalInSeconds(0, 10, 0))
    println(intervalInSeconds(1, 0, 1))
     */
        println(intervalInSeconds(1, 20, 15))
        println(intervalInSeconds(minutes = 1, seconds = 25))
        println(intervalInSeconds(hours = 2))
        println(intervalInSeconds(minutes = 10))
        println(intervalInSeconds(hours = 1, seconds = 1))
        //join to string
        val options = listOf("a", "b", "c")
        println(joinOptions(options))  // [a, b, c]
        println(joinOptions(emptyList()))  // []
        println(joinOptions(listOf("a", "b", "c")))  // [a, b, c]
        println(joinOptions(listOf("a", "b", "c", "d")))  // [a, b, c, d]
        println(joinOptions(listOf("a", "b", "c", "d", "e")))  // [a, b, c, d, e]
        println(joinOptions(listOf("a", "b", "c", "d", "e", "f")))  // [a, b, c, d, e, f]
        println(joinOptions(listOf("a", "b", "c", "d", "e", "f", "g")))  // [a, b, c, d, e, f, g]
    }



    /*
Functions without return
If your function doesn't return a useful value then its return type is Unit.
Unit is a type with only one value â€“ Unit.
You don't have to declare that Unit is returned explicitly in your function body.
This means that you don't have to use the return keyword or declare a return type:
You can skip specific parameters with default values, rather than omitting them all.
However, after the first skipped parameter, you must name all subsequent parameters.
*/

    fun printMessage(message: String) {
        println(message)
    }
// `return Unit` or `return` is optional


    /*
 You can declare your own functions in Kotlin using the fun keyword.

function parameters are written within parentheses ().

each parameter must have a type, and multiple parameters must be separated by commas ,.

the return type is written after the function's parentheses (), separated by a colon :.

the body of a function is written within curly braces {}.

the return keyword is used to exit or return something from a function.

If a function doesn't return anything useful,
the return type and return keyword can be omitted. Learn more about this in Functions without return.

In the following example:

x and y are function parameters.

x and y have type Int.

the function's return type is Int.

the function returns a sum of x and y when called.


In Kotlin, the main function is the entry point of the program. By convention,
it is usually placed at the top of the file.
However, it is not a strict requirement and you can place it anywhere within the file.
The important thing is that there should be only one main function in your program.

recommended coding convention is that you name functions starting with a lowercase letter and use camel case with no underscores.
*/

    /*
Commented out because it is added in the main function at top

fun main() {
	println(sum(1, 2))
}
*/

    fun addition(x: Int, y: Int): Int {
        return x + y
    }

    /*
To make your code more concise, you can use single-expression functions.
For example, the sum() function can be shortened:
You can remove the curly braces {} and declare the function body using the assignment operator =.
And due to Kotlin's type inference, you can also omit the return type. The sum() function then becomes one line:
 */

    fun sum2(x: Int, y: Int) = x + y

    /*
For concise code, when calling your function, you don't have to include parameter names.
However, including parameter names does make your code easier to read.
This is called using named arguments. If you do include parameter names, then you can write the parameters in any order.

In the following example, string templates ($) are used to access the parameter values,
convert them to String type, and then concatenate them into a string for printing.

Omitting the return type is only possible when your function has no body ({}).
Unless your function's return type is Unit.
*/

    /*
fun main() {
    // Uses named arguments with swapped parameter order
    printMessageWithPrefix(prefix = "Log", message = "Hello")
    // [Log] Hello
}
*/

    fun printMessageWithPrefix(message: String, prefix: String = "Info") {
        println("[$prefix] $message")
    }

    /*
Default parameter values

You can define default values for your function parameters.
Any parameter with a default value can be omitted when calling your function.
To declare a default value, use the assignment operator = after the type:

fun main() {
	printMessageWithPrefix("Hello")
	printMessageWithPrefix("Hello", "Log")
	printMessageWithPrefix(prefix = "Log", message = "Hello") same as above
}
*/

    /*
Functions practice
radius of circle in Int format as a parameter and output the area of the circle
radius = circumference / (2 * PI)
area = PI * radius * radius
 */

    fun circleArea(radius: Int): {
        return Math.PI * radius * radius
    }

    fun circleArea2(radius: Int) = Math.PI * radius * radius

//fun intervalInSeconds(hours: Int, minutes: Int, seconds: Int) =
//((hours * 60) + minutes) * 60 + seconds

    fun intervalInSeconds(hours: Int = 0, minutes: Int = 0, seconds: Int = 0) = ((hours * 60) + minutes) * 60 + seconds

    fun joinOptions(options: Collection<String>) =
        options.joinToString(prefix = "[", postfix = "]")

}